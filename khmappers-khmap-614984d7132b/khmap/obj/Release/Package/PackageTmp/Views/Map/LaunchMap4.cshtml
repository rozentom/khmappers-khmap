@model WebApplication2.Models.Map
@{
    Layout = null;
}

@*@Styles.Render("~/Content/spectrum.css")*@

@Styles.Render("~/Content/bootstrap.css")
@Scripts.Render("~/bundles/modernizr")
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/bootstrap")
@Styles.Render("~/Content/Map.css")
@Scripts.Render("~/Scripts/go.js")

@*@Scripts.Render("~/Scripts/spectrum.js")*@



<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />

    @*<link href="http://evoluteur.github.com/colorpicker/css/evol.colorpicker.css" rel="stylesheet" />
    <script src="http://evoluteur.github.com/colorpicker/js/evol.colorpicker.min.js" type="text/javascript"></script>*@
    @*<link href="~/Content/font-awesome.css" rel="stylesheet" />
    <link href="~/Content/font-awesome.min.css" rel="stylesheet" />*@

    @*TODO local*@
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/themes/smoothness/jquery-ui.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"></script>


    <title>Map</title>

    <script id="code">

    var isSaved = '@ViewBag.isSaved';
    var mapNameGlobal = '@Model.Name';
    var mapIdGlobal = '@Model.Id';

    function init() {

        var $ = go.GraphObject.make;  // for conciseness in defining templates
        myDiagram =
          $(go.Diagram, "myDiagram",  // must name or refer to the DIV HTML element
            {
                initialContentAlignment: go.Spot.Center,
                allowDrop: true,  // must be true to accept drops from the Palette
                allowLink: false,
                "draggingTool.dragsLink": true,
                "draggingTool.isGridSnapEnabled": true,
                "linkingTool.isUnconnectedLinkValid": true,
                "linkingTool.portGravity": 20,
                "relinkingTool.isUnconnectedLinkValid": true,
                "relinkingTool.portGravity": 20,
                "relinkingTool.fromHandleArchetype":
                  $(go.Shape, "Diamond", { segmentIndex: 0, cursor: "pointer", desiredSize: new go.Size(10, 10), fill: "tomato", stroke: "darkred" }),
                "relinkingTool.toHandleArchetype":
                  $(go.Shape, "Diamond", { segmentIndex: -1, cursor: "pointer", desiredSize: new go.Size(10, 10), fill: "darkred", stroke: "tomato" }),
                "linkReshapingTool.handleArchetype":
                  $(go.Shape, "Diamond", { desiredSize: new go.Size(7, 7), fill: "lightblue", stroke: "deepskyblue" }),
                rotatingTool: $(TopRotatingTool),  // defined below
                //"rotatingTool.snapAngleMultiple": 15,
                //"rotatingTool.snapAngleEpsilon": 15,
                // don't set some properties until after a new model has been loaded
                "InitialLayoutCompleted": loadDiagramProperties,  // this DiagramEvent listener is defined below
                "LinkDrawn": maybeChangeLinkCategory,     // these two DiagramEvents call a
                "LinkRelinked": maybeChangeLinkCategory,
                "undoManager.isEnabled": true,

                "linkingTool.linkValidation": validLink,  // defined below
                "relinkingTool.linkValidation": validLink,
                "panningTool.isEnabled": false

            });
        // when the document is modified, add a "*" to the title and enable the "Save" button
        myDiagram.addDiagramListener("Modified", function (e) {
            var button = document.getElementById("SaveButton");
            if (button) button.disabled = !myDiagram.isModified;
            var idx = document.title.indexOf("*");
            if (myDiagram.isModified) {
                if (idx < 0) document.title += "*";
            } else {
                if (idx >= 0) document.title = document.title.substr(0, idx);
            }
        });
        // Define a function for creating a "port" that is normally transparent.
        // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
        // and where the port is positioned on the node, and the boolean "output" and "input" arguments
        // control whether the user can draw links from or to the port.
        function makePort(name, spot, output, input) {
            // the port is basically just a small transparent square
            return $(go.Shape, "Circle",
                     {
                         fill: null,  // not seen, by default; set to a translucent gray by showSmallPorts, defined below
                         stroke: null,
                         desiredSize: new go.Size(7, 7),
                         alignment: spot,  // align the port on the main Shape
                         alignmentFocus: spot,  // just inside the Shape
                         portId: name,  // declare this object to be a "port"
                         fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
                         fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
                         cursor: "pointer"  // show a different cursor to indicate potential link point
                     });
        }


        var nodeSelectionAdornmentTemplate =
          $(go.Adornment, "Auto",
            $(go.Shape, { fill: null, stroke: "deepskyblue", strokeWidth: 1.5, strokeDashArray: [4, 2] }),
            $(go.Placeholder)
          );



        var nodeResizeAdornmentTemplate =
          $(go.Adornment, "Spot",
            { locationSpot: go.Spot.Right },
            $(go.Placeholder),
            $(go.Shape, { alignment: go.Spot.TopLeft, cursor: "nw-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
            $(go.Shape, { alignment: go.Spot.Top, cursor: "n-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
            $(go.Shape, { alignment: go.Spot.TopRight, cursor: "ne-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
            $(go.Shape, { alignment: go.Spot.Left, cursor: "w-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
            $(go.Shape, { alignment: go.Spot.Right, cursor: "e-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
            $(go.Shape, { alignment: go.Spot.BottomLeft, cursor: "se-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
            $(go.Shape, { alignment: go.Spot.Bottom, cursor: "s-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
            $(go.Shape, { alignment: go.Spot.BottomRight, cursor: "sw-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" })
          );

        var nodeRotateAdornmentTemplate =
          $(go.Adornment,
            { locationSpot: go.Spot.Center, locationObjectName: "CIRCLE" },
            $(go.Shape, "Circle", { name: "CIRCLE", cursor: "pointer", desiredSize: new go.Size(7, 7), fill: "lightblue", stroke: "deepskyblue" }),
            $(go.Shape, { geometryString: "M3.5 7 L3.5 30", isGeometryPositioned: true, stroke: "deepskyblue", strokeWidth: 1.5, strokeDashArray: [4, 2] })
          );

        var nodeMenu =
           $(go.Adornment, "Vertical",
             $("ContextMenuButton",
                 $(go.TextBlock, "Properties", { margin: 3 }),
                 { click: function (e, obj) { nodeProperties(e, obj); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "modal", { margin: 3 }),
                 { click: function (e, obj) { showModal(obj); } }));


        var contributionLinkMenu =
           $(go.Adornment, "Vertical",
             $("ContextMenuButton",
                 $(go.TextBlock, "+", { margin: 3 }),
                 { click: function (e, obj) { setContributionValue(obj, "+"); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "++", { margin: 3 }),
                 { click: function (e, obj) { setContributionValue(obj, "++"); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "-", { margin: 3 }),
                 { click: function (e, obj) { setContributionValue(obj, "-"); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "--", { margin: 3 }),
                 { click: function (e, obj) { setContributionValue(obj, "--"); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "Properties", { margin: 3 }),
                 { click: function (e, obj) { showLinePropertiesModal(obj); } }));

        var linkMenu =
           $(go.Adornment, "Vertical",
             $("ContextMenuButton",
                 $(go.TextBlock, "Properties", { margin: 3 }),
                 { click: function (e, obj) { showLinePropertiesModal(obj); } }));



        function nodeProperties(e, obj) {
            var node = obj.part.adornedObject;
            myDiagram.model.setDataProperty(node.data, "fill", go.Brush.randomColor());
            var data = node.data;
            alert('color: ' + data.fill + " strok: " + data.stroke);
        }

        function linkProperties(e, obj) {
            //alert("bla");
            var link = obj.part.adornedPart;
            //myDiagram.model.setDataProperty(link.data, "text", "lala");
            //myDiagram.model.setDataProperty(link.data, "curve", go.Link.Orthogonal);
            //myDiagram.model.setDataProperty(link.data, "color", go.Brush.randomColor());
            alert(link.data.curve === go.Link.Bezier);
            //myDiagram.model.setDataProperty(link.data, "visible", false);
        }

        function setContributionValue(obj, val) {
            var link = obj.part.adornedPart;
            link.diagram.startTransaction("setContributionValue");
            myDiagram.model.setDataProperty(link.data, "text", val);
            myDiagram.model.setDataProperty(link.data, "curve", go.Link.Bezier);
            link.diagram.commitTransaction("setContributionValue");
        }


        //myDiagram.nodeTemplate =
        myDiagram.nodeTemplateMap.add("Task",
          $(go.Node, "Spot",
            {
                locationSpot: go.Spot.Center,
                locationObjectName: "PANEL",
                selectionObjectName: "PANEL",
                selectionAdornmentTemplate: nodeSelectionAdornmentTemplate,
                contextMenu: nodeMenu
            },
            //{ selectionAdorned: false, contextMenu: activityNodeMenu },
            new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
            { selectable: true },
            { resizable: true, resizeObjectName: "PANEL", resizeAdornmentTemplate: nodeResizeAdornmentTemplate },
            //{ rotatable: true, rotateAdornmentTemplate: nodeRotateAdornmentTemplate },
            new go.Binding("angle").makeTwoWay(),
            // the main object is a Panel that surrounds a TextBlock with a Shape
            $(go.Panel, "Auto",
              { name: "PANEL" },
              new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
              $(go.Shape, "Rectangle",  // default figure
                {
                    portId: "", // the default port: if no spot on link data, use closest side
                    fromLinkable: true, toLinkable: true, cursor: "pointer",
                    fill: "white",  // default color
                    name: "SHAPE"
                },
                new go.Binding("figure", "figure").makeTwoWay(),
                new go.Binding("fill", "fill").makeTwoWay(),
                new go.Binding("stroke", "stroke").makeTwoWay(),
                new go.Binding("strokeWidth", "strokeWidth").makeTwoWay()
              ),
              $(go.TextBlock,
                {
                    font: "bold 11pt Helvetica, Arial, sans-serif",
                    margin: 8,
                    minSize: new go.Size(45, 25),
                    maxSize: new go.Size(160, NaN),
                    wrap: go.TextBlock.WrapFit,
                    editable: true,
                    textAlign: "center",
                    name: "TEXT"
                },
                new go.Binding("text", "text").makeTwoWay())
            ),


            $(go.Panel, "Auto",
		        { visible: false },
                new go.Binding("itemArray", "items")),

            // four small named ports, one on each side:

            //makePort("T", go.Spot.Top, false, true),
            //makePort("L", go.Spot.Left, true, true),
            //makePort("R", go.Spot.Right, true, true),
            //makePort("B", go.Spot.Bottom, true, false),

            { // handle mouse enter/leave events to show/hide the ports
                mouseEnter: function (e, node) { showSmallPorts(node, true); },
                mouseLeave: function (e, node) { showSmallPorts(node, false); }
            }


          ));

        myDiagram.nodeTemplateMap.add("Quality",
          $(go.Node, "Spot",
            { locationSpot: go.Spot.Center },
            new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
            { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate },
            { resizable: true, resizeObjectName: "PANEL", resizeAdornmentTemplate: nodeResizeAdornmentTemplate },
            //{ rotatable: true, rotateAdornmentTemplate: nodeRotateAdornmentTemplate },
            new go.Binding("angle").makeTwoWay(),
            // the main object is a Panel that surrounds a TextBlock with a Shape
            $(go.Panel, "Auto",
              { name: "PANEL" },
              new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
              $(go.Shape, "Ellipse",  // default figure
                {
                    portId: "", // the default port: if no spot on link data, use closest side
                    fromLinkable: true, toLinkable: true, cursor: "pointer",
                    fill: "white"  // default color
                },
                new go.Binding("figure").makeTwoWay(),
                new go.Binding("fill").makeTwoWay()),
              $(go.TextBlock,
                {
                    font: "bold 11pt Helvetica, Arial, sans-serif",
                    margin: 8,
                    maxSize: new go.Size(160, NaN),
                    wrap: go.TextBlock.WrapFit,
                    editable: true
                },
                new go.Binding("text").makeTwoWay())
            ),
            // four small named ports, one on each side:
            /*
            makePort("T", go.Spot.Top, false, true),
            makePort("L", go.Spot.Left, true, true),
            makePort("R", go.Spot.Right, true, true),
            makePort("B", go.Spot.Bottom, true, false),
            */
            { // handle mouse enter/leave events to show/hide the ports
                mouseEnter: function (e, node) { showSmallPorts(node, true); },
                mouseLeave: function (e, node) { showSmallPorts(node, false); }
            }
          ));


        function showSmallPorts(node, show) {
            node.ports.each(function (port) {
                if (port.portId !== "") {  // don't change the default port, which is the big shape
                    port.fill = show ? "rgba(0,0,0,.3)" : null;
                }
            });
        }
        var linkSelectionAdornmentTemplate =
          $(go.Adornment, "Link",
            $(go.Shape,
              { isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0 })  // use selection object's strokeWidth
          );

        myDiagram.linkTemplate =
        $(go.Link,       // the whole link panel
            $(go.Shape));

        myDiagram.linkTemplateMap.add("Contribution",
        $(go.Link, // the whole link panel
            {
                routing: go.Link.Normal,
                curve: go.Link.Bezier,
                adjusting: go.Link.None,
                curviness: 60,
                selectable: true,
                relinkableFrom: true,
                relinkableTo: true,
                reshapable: true,
                contextMenu: contributionLinkMenu
                //selectionAdornmentTemplate: nodeSelectionAdornmentTemplate
            },
            new go.Binding("category", "category").makeTwoWay().ofObject(),
            new go.Binding("routing", "routing").makeTwoWay().ofObject(),
            //new go.Binding("curve", "curve", function (v) { if (v) return v; else return go.Link.Bezier; }).makeTwoWay(go.Link.Bezier.stringify),
            new go.Binding("curve", "curve").makeTwoWay().ofObject(),
            new go.Binding("curviness", "curviness").makeTwoWay().ofObject(),
            //new go.Binding("fromNode", "fromNode"),
            new go.Binding("points", "points").makeTwoWay(),

          //new go.Binding("points", "points").makeTwoWay(),
          $(go.Shape,  // the link path shape
            {
                isPanelMain: true,
                strokeWidth: 2,
                //isLayoutPositioned: false
            },
            new go.Binding("stroke", "color"),  // shape.stroke = data.color
            new go.Binding("strokeWidth", "strokeWidth")  // shape.strokeWidth = data.thick
           ),

          $(go.Shape,  // the arrowhead
            { toArrow: "Standard", stroke: null },
            new go.Binding("stroke", "color"),  // shape.stroke = data.color
            new go.Binding("strokeWidth", "thick")  // shape.strokeWidth = data.thick
           ),

          $(go.Panel, "Auto",
            {
                visible: true,
                name: "LABEL",
            },
            new go.Binding("visible", "visible").makeTwoWay(),
            $(go.Shape, "RoundedRectangle",  // the label shape
              { fill: "#F8F8F8", stroke: null }),
            $(go.TextBlock,
              {
                  textAlign: "center",
                  font: "12pt helvetica, arial, sans-serif",
                  stroke: "black",
                  margin: 2,
                  minSize: new go.Size(10, NaN),
                  editable: false,
              },
              new go.Binding("text", "text").makeTwoWay())
          )
        ));

        myDiagram.linkTemplateMap.add("ConsistsOf",
        $(go.Link,  // the whole link panel
            {

                routing: go.Link.Normal,
                curve: go.Link.None,
                //curviness: 'None',
                selectable: true,
                relinkableFrom: true,
                relinkableTo: true,
                reshapable: true,
                contextMenu: linkMenu
            },
          new go.Binding("routing", "routing").makeTwoWay(),
          new go.Binding("curve", "curve"),
          new go.Binding("curviness", "curviness"),
          new go.Binding("points").makeTwoWay(),
          $(go.Shape,  // the link path shape
            { isPanelMain: true, strokeWidth: 2 },
            new go.Binding("stroke", "color"),  // shape.stroke = data.color
            new go.Binding("strokeWidth", "strokeWidth")  // shape.strokeWidth = data.thick
            ),
          $(go.Shape,  // the arrowhead
            { toArrow: "Standard", stroke: null },
            new go.Binding("stroke", "arrowheadColor"),  // shape.stroke = data.color
            new go.Binding("strokeWidth", "arrowheadStrokeWidth")  // shape.strokeWidth = data.thick
            ),
          $(go.Panel, "Auto",
            new go.Binding("visible", "true").ofObject(),
            $(go.Shape, "RoundedRectangle",  // the link shape
              { fill: "#F8F8F8", stroke: null }),
            $(go.TextBlock,
              {
                  textAlign: "center",
                  font: "10pt helvetica, arial, sans-serif",
                  stroke: "black",
                  margin: 2,
                  minSize: new go.Size(10, NaN),
                  editable: false,
              },
              new go.Binding("text").makeTwoWay())
          )
        ));

        myDiagram.linkTemplateMap.add("AchievedBy",
        $(go.Link,  // the whole link panel
          new go.Binding("routing", "routing"),
          new go.Binding("curve", "curve"),
          new go.Binding("curviness", "curviness"),
          {
              selectable: true,
              relinkableFrom: true,
              relinkableTo: true,
              reshapable: true,
              toEndSegmentLength: 80,
              fromEndSegmentLength: 80
          },
          new go.Binding("points").makeTwoWay(),
          $(go.Shape,  // the link path shape
            { isPanelMain: true, strokeWidth: 2 }),
          $(go.Shape,  // the arrowhead
            { toArrow: "Standard", stroke: null }),
          $(go.Panel, "Auto",
            new go.Binding("visible", "true").ofObject(),
            $(go.Shape, "RoundedRectangle",  // the link shape
              { fill: "#F8F8F8", stroke: null }),
            $(go.TextBlock,
              {
                  textAlign: "center",
                  font: "10pt helvetica, arial, sans-serif",
                  stroke: "black",
                  margin: 2,
                  minSize: new go.Size(10, NaN),
                  editable: false,
              },
              new go.Binding("text").makeTwoWay())
          )
        ));

        myDiagram.linkTemplateMap.add("ExtendedBy",
        $(go.Link,  // the whole link panel
          new go.Binding("routing", "routing"),
          new go.Binding("curve", "curve"),
          new go.Binding("curviness", "curviness"),
          { selectable: true, relinkableFrom: true, relinkableTo: true, reshapable: true },
          new go.Binding("points").makeTwoWay(),
          $(go.Shape,  // the link path shape
            { isPanelMain: true, strokeWidth: 2 }),
          $(go.Shape,  // the arrowhead
            { toArrow: "Standard", stroke: null }),
          $(go.Panel, "Auto",
            new go.Binding("visible", "true").ofObject(),
            $(go.Shape, "RoundedRectangle",  // the link shape
              { fill: "#F8F8F8", stroke: null }),
            $(go.TextBlock,
              {
                  textAlign: "center",
                  font: "10pt helvetica, arial, sans-serif",
                  stroke: "black",
                  margin: 2,
                  minSize: new go.Size(10, NaN),
                  editable: false,
              },
              new go.Binding("text").makeTwoWay())
          )
        ));

        myDiagram.linkTemplateMap.add("Association",
        $(go.Link,  // the whole link panel
          new go.Binding("routing", "routing"),
          new go.Binding("curve", "curve"),
          new go.Binding("curviness", "curviness"),
          { selectable: true, relinkableFrom: true, relinkableTo: true, reshapable: true },
          new go.Binding("points").makeTwoWay(),
          $(go.Shape,  // the link path shape
            { isPanelMain: true, strokeWidth: 2 }),

          $(go.Panel, "Auto",
            new go.Binding("visible", "true").ofObject(),
            $(go.Shape, "RoundedRectangle",  // the link shape
              { fill: "#F8F8F8", stroke: null }),
            $(go.TextBlock,
              {
                  textAlign: "center",
                  font: "10pt helvetica, arial, sans-serif",
                  stroke: "black",
                  margin: 2,
                  minSize: new go.Size(10, NaN),
                  editable: false,
              },
              new go.Binding("text").makeTwoWay())
          )
        ));


        myDiagram.addDiagramListener("LinkDrawn",
          function (e) {
              //alert(e.subject.fromNode.category);
          });

        myDiagram.addDiagramListener("LinkRelinked",
          function (e) {
              //alert(e.subject.category);
          });

        
        var myOverview =
            $(go.Overview, "myOverview",
            { observed: myDiagram, maxScale: 0.5, contentAlignment: go.Spot.Center });
        // change color of viewport border in Overview
        myOverview.box.elt(0).stroke = "dodgerblue";

        //myDiagram.toolManager.linkingTool.linkValidation = sameColor;
        //myDiagram.toolManager.relinkingTool.linkValidation = sameColor;

        load();  // load an initial diagram from some JSON text
        // initialize the Palette that is on the left side of the page


        function maybeChangeLinkCategory(e) {
            var link = e.subject;
            console.log('a: ' + link.category);
            //var linktolink = (link.fromNode.isLinkLabel || link.toNode.isLinkLabel);
            //e.myDiagram.model.setCategoryForLinkData(link.data, (linktolink ? "linkToLink" : ""));
            //alert(e.subject.curve);
            //alert(e.subject.toNode);
            //alert(link.data.category);
        }


        function validLink(fromnode, fromport, tonode, toport, link) {
            //console.log(link instanceof go.Link);
            if (link === null) {
                //return false;
                //myDiagram.currentTool.doCancel();
            }
            if (fromnode === null && tonode === null) {
                //console.log('2 null');
                return false;
            }
            if (fromnode !== null && tonode !== null) {
                if (link === null) {
                    //return false;
                    myDiagram.currentTool.doCancel();
                    return;
                }
                //console.log('0 null');
                //alert(tonode.category);

                //console.log('first');
                //console.log(link.category);
                if (link.category === "ConsistsOf" || link.category === "AchievedBy" || link.category === "ExtendedBy") {
                    return (fromnode.category === tonode.category && fromnode.category === "Task");
                }

                //console.log('second');
                if (link.category === "Association") {
                    return ((fromnode.category === "Task" && tonode.category === "Quality") || (fromnode.category === "Quality" && tonode.category === "Task"));
                }

                //console.log('third');
                if (link.category === "Contribution") {
                    //alert(tonode.category);
                    return ((fromnode.category === "Task" && tonode.category === "Quality") || (fromnode.category === "Quality" && tonode.category === "Quality"));
                }

                //console.log('four');
                //alert("bla");
                return true;
            }
            if ((fromnode === null && tonode !== null) || (fromnode !== null && tonode === null)) {
                //console.log('1 null');

                return true;
            }
            //console.log('else');
            //alert("bla");
            return true;
        };


        //function validLink(fromnode, fromport, tonode, toport, link) {
        //    if (fromport === null && toport === null) {
        //        return false;
        //    }
        //    if (fromport !== null && toport !== null) {
        //        alert(tonode.category);
        //        if (link.category === "ConsistsOf" || link.category === "AchievedBy" || link.category === "ExtendedBy") {
        //            return (fromport.category === toport.category && fromport.category === "Task");
        //        }
        //        if (link.category === "Association") {
        //            return ((fromport.category === "Task" && toport.category === "Quality") || (fromport.category === "Quality" && toport.category === "Task"));
        //        }
        //        if (link.category === "Contribution") {
        //            alert(tonode.category);
        //            return ((fromport.category === "Task" && toport.category === "Quality") || (fromport.category === "Quality" && toport.category === "Quality"));
        //        }
        //        alert("bla");
        //        return true;
        //    }
        //    if ((fromport === null && toport !== null) || (fromport !== null && toport === null)) {
        //        return true;
        //    }
        //    alert("bla");
        //    return true;
        //};



        var activityNodeMenu =
           $(go.Adornment, "Vertical",
             $("ContextMenuButton",
                 $(go.TextBlock, "Add Email Event", { margin: 3 }),
                 { click: function (e, obj) { addActivityNodeBoundaryEvent(2); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "Add Timer Event", { margin: 3 }),
                 { click: function (e, obj) { addActivityNodeBoundaryEvent(3); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "Add Escalation Event", { margin: 3 }),
                 { click: function (e, obj) { addActivityNodeBoundaryEvent(4); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "Add Error Event", { margin: 3 }),
                 { click: function (e, obj) { addActivityNodeBoundaryEvent(7); } }),
             $("ContextMenuButton",
                 $(go.TextBlock, "Rename", { margin: 3 }),
                 { click: function (e, obj) { rename(obj); } }));



        myPalette =
          $(go.Palette, "myPalette",  // must name or refer to the DIV HTML element
            {
                maxSelectionCount: 1,
                nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
                linkTemplate: // simplify the link template, just in this Palette
                  $(go.Link,
                    { // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,
                        // to line up the Link in the same manner we have to pretend the Link has the same location spot
                        locationSpot: go.Spot.Center,

                        selectionAdornmentTemplate:
                          $(go.Adornment, "Link",
                            { locationSpot: go.Spot.Center },
                            $(go.Shape,
                              { isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0 }),
                            $(go.Shape,  // the arrowhead
                              { toArrow: "Standard", stroke: null })
                          )
                    },

                      new go.Binding("routing", "routing"),
                      new go.Binding("curve", "curve"),
                      new go.Binding("curviness", "curviness"),

                    {
                        routing: go.Link.AvoidsNodes,
                        curve: go.Link.JumpOver,
                        corner: 5,
                        toShortLength: 4
                    },
                    new go.Binding("points"),
                    $(go.Shape,  // the link path shape
                      { isPanelMain: true, strokeWidth: 2 }),
                    $(go.Shape,  // the arrowhead
                      { toArrow: "Standard", stroke: null }),
                      $(go.TextBlock,                        // this is a Link label
                          new go.Binding("text", "text"))
                  ),
                model: new go.GraphLinksModel([  // specify the contents of the Palette
                  { category: "", text: " \n \n \n \n " },
                  { category: "Task", text: "Task", fill: "#ffffff", stroke: "#000000", strokeWidth: 1, items: ["554fa04ba9b4882550c6fb80", "55586fdca9b48823f4751908"] },
                  { category: "Quality", text: "Quality" },
                ], [
                  // the Palette also has a disconnected Link, which the user can drag-and-drop
                  { category: "AchievedBy", text: "achieved by", routing: go.Link.Normal, points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) },
                  { category: "ConsistsOf", text: "consists of", routing: go.Link.Normal, points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) },
                  { category: "ExtendedBy", text: "extended by", routing: go.Link.Normal, points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) },
                  { category: "Association", text: "association", routing: go.Link.Normal, points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) },
                  { category: "Contribution", text: "contribution", routing: go.Link.Normal, curve: go.Link.Bezier, curviness: 60, points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) }
                  //{ category: "Contribution", text: "contribution", points: new go.List(go.Point).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) }

                ])
            });
    }
    function TopRotatingTool() {
        go.RotatingTool.call(this);
    }
    go.Diagram.inherit(TopRotatingTool, go.RotatingTool);
    TopRotatingTool.prototype.updateAdornments = function (part) {
        go.RotatingTool.prototype.updateAdornments.call(this, part);
        var adornment = part.findAdornment("Rotating");
        if (adornment !== null) {
            adornment.location = part.rotateObject.getDocumentPoint(new go.Spot(0.5, 0, 0, -30));  // above middle top
        }
    };
    TopRotatingTool.prototype.rotate = function (newangle) {
        go.RotatingTool.prototype.rotate.call(this, newangle + 90);
    };

    // Show the diagram's model in JSON format that the user may edit
    function save() {
        saveDiagramProperties();  // do this first, before writing to JSON
        document.getElementById("mySavedModel").value = myDiagram.model.toJson();
        myDiagram.isModified = false;

        var mModel = myDiagram.model.toJson();

        //alert(isSaved);
        //alert(isSaved == 'True');

        if (isSaved == 'False') {
            $('#myModal').modal('show');
            //alert('la');


            //var mName = "bla2";
            //var mDescription = "bla3";

            @*$.ajax({
                type: 'POST',
                url: '@Url.Action("CreateMap", "Map")',
                //traditional: true,
                //contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: { mapModel: mModel, mapName: mName, mapDescription: mDescription },
                success: function (r) {
                    alert('ooooooo' + r);
                    isSaved = 'True';
                    window.history.pushState('state', 'Title', '/map/LaunchMap4/' + r);

                },
                error: function (r) {
                    alert(r.status + " " + r.statusText);
                },
                async: false
            });*@

        }
        else {
            //alert(isSaved);

            var mapId = mapIdGlobal;

            // to fix!!!!!!!!!!!!

            $.ajax({
                type: 'POST',
                url: '@Url.Action("UpdateMap", "Map")',
                //traditional: true,
                //contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: { mapId: mapId, mapModel: mModel },
                success: function (r) {
                    //alert(r);
                    isSaved = 'True';
                    myDiagram.isModified = false;
                },
                error: function (r) {
                    alert(r.status + " " + r.statusText);
                },
                async: false
            });
        }

        //alert(mModel);
    }


    function load() {
        if (isSaved == 'True') {
            var mapName = '@Model.Name';
            var myMap = '@Html.Raw(ViewBag.myMap)';

            //alert(myMap);

            document.getElementById("mySavedModel").value = myMap;
            myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
            $('#currentFile').text(mapName);
        }
        else {
            var mapName = '@Model.Name';
            document.getElementById("mySavedModel").value = "{}";
            myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
            $('#currentFile').text(mapName);
        }
    }

    function saveDiagramProperties() {
        myDiagram.model.modelData.position = go.Point.stringify(myDiagram.position);
    }
    // Called by "InitialLayoutCompleted" DiagramEvent listener, NOT directly by load()!
    function loadDiagramProperties(e) {
        var pos = myDiagram.model.modelData.position;
        if (pos) myDiagram.position = go.Point.parse(pos);
        //myDiagram.model.position = go.Spot.Center;
    }


    
    $(function () {
        $(".modal-draggable .modal-dialog").draggable({
            handle: ".modal-header"
        })
    });


    var refsOfObject;
    var activeObject;

    function showModal(obj) {
        //alert(e.items[0]);
        var node = obj.part.adornedObject;

        //console.log(node.data.items);

        activeObject = node.data;
        refsOfObject = node.data.items;
        setInitialObjectStyle(node.data);
        $('#refModal').modal('show');
    }


    function setInitialObjectStyle(node) {
        console.log(node.fill);
        console.log(node.stroke);
        $("#colorFill").val(node.fill);
        $("#colorStroke").val(node.stroke);
    }

    function setInitialLinkObjectStyle(node) {
        console.log(node.fill);
        console.log(node.stroke);
        $("#linkColorStroke").val(node.stroke);
    }

    function showLinePropertiesModal(obj) {
        console.log("showLinePropertiesModal");
        var link = obj.part.adornedObject;
        activeObject = link.data;
        refsOfObject = link.data.items;
        $('#linePropertiesModal').modal('show');
    }


    //"stroke", "color"),  // shape.stroke = data.color
    //        new go.Binding("strokeWidth", "strokeWidth")  /

    //$('#zoomIn').on('click', function (e) {
    //    alert("bla");
    //    myDiagram.commandHandler.increaseZoom(2);
    //})

    
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });


    //$(document).ready(function () {
    //    $("#color_picker").colorpicker();
    //});


    //$(function () {
    //    $("#datepicker").datepicker();
    //});


    $(function () {
        $("button#saveMapNow").click(function () {
            //console.log('bla');
            var mModel = myDiagram.model.toJson();
            var mName = $('#mapName').val();
            var mDescription = $('#mapDescription').val();
            var $form = $(this);
            //var $target = $(that.attr('data-target'));
            $.ajax({
                type: "POST",
                url: '@Url.Action("CreateMap", "Map")',
                data: { mapModel: mModel, mapName: mName, mapDescription: mDescription },
                success: function (r) {
                    //$("#thanks").html(msg) //hide button and show thank you
                    isSaved = 'True';
                    window.history.pushState('state', 'Title', '/map/LaunchMap4/' + r);
                    document.getElementById("mySavedModel").value = myDiagram.model.toJson();
                    $('#currentFile').text(mName);
                    mapNameGlobal = mName;
                    mapIdGlobal = r;
                    $("#myModal").modal('hide'); //hide popup
                },
                error: function () {
                    alert("failure");
                }
            });
        });
    });


        //jQuery('#colorinput').on('change', function () {
        //    jQuery('#main').css('background-color', jQuery(this).val());
        //});

        jQuery(function ($) {
            $("#colorFill").on('change', function () {
                console.log($(this).val());
                changeNodeFill(activeObject, $(this).val());
                //$("h1").css('background', $(this).val());
            })
        });

        jQuery(function ($) {
            $("#colorStroke").on('change', function () {
                console.log($(this).val());
                changeNodeStroke(activeObject, $(this).val());
                //$("h1").css('background', $(this).val());
            })
        });

        function changeNodeFill(node, color) {
            //node.diagram.startTransaction("changeColor");
            myDiagram.model.setDataProperty(node, "fill", color);
           //node.diagram.startTransaction("changeColor");
        }

        function changeNodeStroke(node, color) {
            //node.diagram.startTransaction("changeColor");
            myDiagram.model.setDataProperty(node, "stroke", color);
            //node.diagram.startTransaction("changeColor");
        }

        function changeStrokeWidth(node, strokeWidth) {
            myDiagram.model.setDataProperty(node, "strokeWidth", strokeWidth);
        }

        function changeLinkRouting(linkData, routingType) {
            console.log("changeLinkRouting");

            myDiagram.model.setDataProperty(linkData, "routing", routingType);
            return;

            //if (routingType == "Normal") {
            //    myDiagram.model.setDataProperty(linkData, "routing", go.Link.Normal);
            //}
            //else if (routingType == "Orthogonal") {
            //    myDiagram.model.setDataProperty(linkData, "routing", go.Link.Orthogonal);
            //}
            //else {
            //    myDiagram.model.setDataProperty(linkData, "routing", go.Link.AvoidsNodes);
            //}
        }


        function changeLinkCurve(linkData, curveType) {
            console.log("changeLinkCurve");

            myDiagram.model.setDataProperty(linkData, "curve", curveType);
            return;
        }


        jQuery(function ($) {
            $("#linkColorStroke").on('change', function () {
                console.log($(this).val());
                changeLinktroke(activeObject, $(this).val());
                //$("h1").css('background', $(this).val());
            })
        });

        function changeLinktroke(link, color) {
            //node.diagram.startTransaction("changeColor");
            myDiagram.model.setDataProperty(link, "color", color);
            //node.diagram.startTransaction("changeColor");
        }


        jQuery(function ($) {
            $("#linkArrowheadColor").on('change', function () {
                console.log($(this).val());
                changeLinkArrowheadColor(activeObject, $(this).val());
                //$("h1").css('background', $(this).val());
            })
        });

        function changeLinkArrowheadColor(link, color) {
            //node.diagram.startTransaction("changeColor");
            myDiagram.model.setDataProperty(link, "arrowheadColor", color);
            //node.diagram.startTransaction("changeColor");
        }

        function changeArrowheadStrokeWidth(link, strokeWidth) {
            myDiagram.model.setDataProperty(link, "arrowheadStrokeWidth", strokeWidth);
        }
        //changeArrowheadStrokeWidth

        //new go.Binding("routing", "routing").makeTwoWay().ofObject(),
           //new go.Binding("curve", "curve", function (v) { if (v) return v; else return go.Link.Bezier; }).makeTwoWay(go.Link.Bezier.stringify),
           //new go.Binding("curve", "curve").makeTwoWay().ofObject(),
           //new go.Binding("curviness", "curviness").makeTwoWay().ofObject(),


        //$(document).ready(function () {
        //    $("#refModal").draggable({
        //        handle: ".modal-header"
        //    })
        //});


        

    //jQuery(function ($) {
    //    $('form[data-async]').on('submit', function (event) {
    //        alert('bla');
    //        var $form = $(this);
    //        var $target = $($form.attr('data-target'));

    //        $.ajax({
    //            type: $form.attr('method'),
    //            url: $form.attr('action'),
    //            data: $form.serialize(),

    //            success: function (data, status) {
    //                $target.html(data);
    //            }
    //        });

    //        event.preventDefault();
    //    });
    //});

    @*$(document).ready(function () {
        $('#saveNewMap').submit(function () {
            alert('snm');
            var that = this;
            var myMapModel = myDiagram.model.toJson();
            $('#response').html("<b>Loading response...</b>");
            $.ajax({
                type: 'POST',
                url: '@Url.Action("CreateMap", "Map")',
                data: $(that).serialize()
            })
                .done(function (data) {
                    $('#response').html(data);

                })
                .fail(function () {
                    alert("Posting failed.");

                });
            return false;

        });
    });*@

    @*var mName = "bla2";
    var mDescription = "bla3";

    $.ajax({
        type: 'POST',
        url: '@Url.Action("CreateMap", "Map")',
        //traditional: true,
        //contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: { mapModel: mModel, mapName: mName, mapDescription: mDescription },
        success: function (r) {
            alert('ooooooo' + r);
            isSaved = 'True';
            window.history.pushState('state', 'Title', '/map/LaunchMap4/' + r);

        },
        error: function (r) {
            alert(r.status + " " + r.statusText);
        },
        async: false
    });*@


    //jQuery(function ($) {
    //    $('myModal').on('submit', function (event) {
    //        alert('bla');
    //        var $form = $(this);
    //        var $target = $($form.attr('data-target'));

    //        $.ajax({
    //            type: $form.attr('method'),
    //            url: $form.attr('action'),
    //            data: $form.serialize(),

    //            success: function (data, status) {
    //                $target.modal('hide');
    //            }
    //        });

    //        event.preventDefault();
    //    });
    //});

       
        function loadReferences() {
            //console.log("tab2");
            var dataArr = refsOfObject;
            var arrdata = JSON.stringify(dataArr);
            //console.log(dataArr);

            $.ajax({
                type: 'POST',
                //traditional: true,
                url: '@Url.Action("MyRefs", "Reference")',
                data: { refs: arrdata },
                dataType: 'html',
                success: function (d) {
                    //console.log("bla: " + d);
                    $('#refsList').html(d);
                    addReference();
                }
            });
            return false;
        };

        function addReference() {
            $.ajax({
                type: 'GET',
                //traditional: true,
                url: '@Url.Action("CreateRef", "Reference")',
                dataType: 'html',
                success: function (d) {
                    //console.log("bla: " + d);
                    $('#refAdd').html(d);
                }
            });
        }
        


    </script>

</head>
<body onload="init()">

    <div id="menuBar">
        <nav class="navbar navbar-default navbar-fixed-top">
            <div class="container-fluid navbar-custom">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <!-- <a class="navbar-brand" href="#">Knowledge Map</a> -->
                    @Html.ActionLink("Knowledge Map", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
                </div>

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                    <ul class="nav navbar-nav">
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">File <span class="caret"></span></a>
                            <ul class="dropdown-menu" role="menu">
                                <li>@Html.ActionLink("New", "LaunchMap4", "Map")</li>
                                <li><a href="#">Open</a></li>
                                <li><a href="#" onclick="save()">Save</a></li>
                                <li><a href="#">Save As</a></li>
                                <li class="divider"></li>
                                <li><a href="#">Document Properties</a></li>
                                <li class="divider"></li>
                                <li><a href="#">Print</a></li>
                                <li class="divider"></li>
                                <li>@Html.ActionLink("Exit", "Index", "Home")</li>
                            </ul>
                        </li>
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Edit <span class="caret"></span></a>
                            <ul class="dropdown-menu" role="menu">
                                <li><a href="#" onclick="myDiagram.commandHandler.undo()">Undo</a></li>
                                <li><a href="#" onclick="myDiagram.commandHandler.redo()">Redo</a></li>
                                <li class="divider"></li>
                                <li><a href="#" onclick="myDiagram.commandHandler.selectAll()">Select All</a></li>
                                <li><a href="#" onclick="myDiagram.commandHandler.copySelection()">Copy</a></li>
                                <li><a href="#" onclick="myDiagram.commandHandler.cutSelection()">Cut</a></li>
                                <li><a href="#" onclick="myDiagram.commandHandler.pasteSelection()">Paste</a></li>
                                <li><a href="#" onclick="myDiagram.commandHandler.deleteSelection()">Delete</a></li>
                            </ul>
                        </li>
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Help <span class="caret"></span></a>
                            <ul class="dropdown-menu" role="menu">
                                <li><a href="#">Undo</a></li>
                                <li><a href="#">Redo</a></li>
                                <li class="divider"></li>
                                <li><a href="#">Select All</a></li>
                                <li><a href="#">Copy</a></li>
                                <li><a href="#">Cut</a></li>
                                <li><a href="#">Paste</a></li>
                                <li><a href="#">Delete</a></li>
                            </ul>
                        </li>
                    </ul>

                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="#"><div id="currentFile">(Unsaved File)</div></a></li>
                    </ul>


                </div><!-- /.navbar-collapse -->
            </div><!-- /.container-fluid -->


            <div class="btn-toolbar" role="toolbar" style="margin: 1px; padding-top: 6px; padding-bottom: 6px; padding-left: 8px">
                <div class="btn-group">
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="New" onclick="location.href='@Url.Action("LaunchMap4", "Map")'"><i class="fa fa-file-o"></i></button>
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Open" onclick="myDiagram.commandHandler.redo()"><i class="fa fa-folder-open-o"></i></button>
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Save" onclick="save()"><i class="fa fa-save"></i></button>
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Print" onclick="save()"><i class="fa fa-print"></i></button>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Undo (Ctrl+Z)" onclick="myDiagram.commandHandler.undo()"><i class="fa fa-reply"></i></button>
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Redo (Ctrl+Y)" onclick="myDiagram.commandHandler.redo()"><i class="fa fa-share"></i></button>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Zoom In (Ctrl++)" onclick="myDiagram.commandHandler.increaseZoom(1.1)"><i class="fa fa-search-plus"></i></button>
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Zoom Out (Ctrl+-)" onclick="myDiagram.commandHandler.decreaseZoom(0.9)"><i class="fa fa-search-minus"></i></button>
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Reset (Ctrl+0)" onclick="myDiagram.commandHandler.resetZoom()"><i class="fa fa-repeat"></i></button>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Cut (Ctrl+X)" onclick="myDiagram.commandHandler.cutSelection()"><i class="fa fa-scissors"></i></button>
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Copy (Ctrl+C)" onclick="myDiagram.commandHandler.copySelection()"><i class="fa fa-copy"></i></button>
                    <button type="button" class="btn btn-default" data-toggle="tooltip" data-placement="bottom" title="Paste (Ctrl+V)" onclick="myDiagram.commandHandler.pasteSelection()"><i class="fa fa-paste"></i></button>
                </div>
            </div>

        </nav>
    </div>
    <!--END menu bar -->

    <div id="PaletteAndDiagram">
        <div id="sideBar">
            <div class="handle">Map Shapes</div>
            <div id="myPalette"></div>
            <div class="handle">Overview</div>
            <div id="myOverview"></div>
        </div>
        <div id="mainBar">
            <div id="myDiagram"></div>

            <div class="tabbable" id="myTabs">
                <ul class="nav nav-tabs">
                    <li class="active">
                        <a href="#panel-637089" data-toggle="tab">JSON Model</a>
                    </li>
                    <li>
                        <a href="#panel-826018" data-toggle="tab">Console</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="panel-637089">

                        <div id="tabData">
                            <textarea id="mySavedModel">
                                bla
                            </textarea>
                        </div>

                    </div>
                    <div class="tab-pane" id="panel-826018">
                        <div id="tabData">
                                <p>
                                    Howdy, I'm in Section 2.
                                </p>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>


    @*<a data-toggle="modal" href="#myModal">Write a Review</a>*@

    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Save Map</h4>
                </div>
                <div class="modal-body">
                    <form id="saveNewMap" data-async data-target="#myModal" action="" method="POST" role="form" class="form-horizontal">
                        <div class="form-group">
                            <label class="col-md-12" for="mapName">Name</label>
                            <div class="col-md-12">
                                <input type="text" class="form-control" id="mapName" placeholder="Enter Map Name">
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-md-12" for="mapDescription">Description</label>
                            <div class="col-md-12">
                                <textarea class="form-control" id="mapDescription" rows="3"></textarea>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" id ="saveMapNow" class="btn btn-primary" value="Submit">Save</button>
                    <div id='response'></div>
                </div>
            </div>
        </div>
    </div>


    <nav class="navbar navbar-default navbar-fixed-bottom">
        <div class="container-fluid">
            <p class="navbar-text">Notifications</p>
        </div>
    </nav>



    <div class="modal fade modal-draggable" id="refModal" tabindex="-1" data-focus-on="input:first" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Save Map</h4>
                </div>
                <div class="modal-body">
                    <div class="tabbable">
                        <!-- Only required for left/right tabs -->
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#tab1" data-toggle="tab">Properties</a></li>
                            <li><a href="#tab2" data-toggle="tab" @*onclick="loadReferences()"*@>References</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab1">

                                <div class="btn-toolbar">
                                    <div class="btn-group">
                                        <input type="color" id="colorFill" value="#ff0000">
                                        <input type="color" id="colorStroke" value="#ff0000">
                                    </div>
                                    <div class="btn-group">

                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                                                <i class="fa fa-scissors"></i>
                                                <span class="caret"></span>
                                            </button>
                                            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 0)">0px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 1)">1px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 2)">2px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 3)">3px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 4)">4px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 5)">5px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 6)">6px</a></li>
                                            </ul>
                                        </div>

                                    </div>
                                </div>


                            </div>
                            <div class="tab-pane" id="tab2">
                                
                                <div id="refsList">

                                    <!-- modal placeholder-->
                                    <div id='myModal1' class='modal fade in' tabindex="-1" data-focus-on="input:first" style="display: none;">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div id='myModalContent'></div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-offset-2 col-md-10" id="replacetarget">
                                            @{ Html.RenderAction("Index", "Reference", new { id = Model.Id }); }
                                        </div>
                                    </div>

                                </div>
                                <div id="refAdd">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" id="saveMapNow" class="btn btn-primary" value="Submit">Save</button>

                    <button onclick="addReference()">Click me</button>

                    <div id='response'></div>
                </div>
            </div>
        </div>
    </div>    


    <div class="modal fade modal-draggable" id="linePropertiesModal" tabindex="-1" role="dialog" aria-labelledby="linePropertiesModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="linePropertiesModalLabel">Link Properties</h4>
                </div>
                <div class="modal-body">
                    <div class="tabbable">
                        <!-- Only required for left/right tabs -->
                        <ul class="nav nav-tabs">
                            <li class="active"><a href="#tab1" data-toggle="tab">Properties</a></li>
                            <li><a href="#tab2" data-toggle="tab">References</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active" id="tab1">

                                <div class="btn-toolbar">

                                    <div class="btn-group">
                                        <input type="color" id="linkColorStroke" value="#ff0000">
                                    </div>
                                    <div class="btn-group">
                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                                                <i class="fa fa-scissors"></i>
                                                <span class="caret"></span>
                                            </button>
                                            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeLinkRouting(activeObject, go.Link.Normal)">Normal</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeLinkRouting(activeObject, go.Link.Orthogonal)">Orthogonal</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeLinkRouting(activeObject, go.Link.AvoidsNodes)">AvoidsNodes</a></li>
                                            </ul>
                                        </div>


                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-expanded="true">
                                                <i class="fa fa-scissors"></i>
                                                <span class="caret"></span>
                                            </button>
                                            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeLinkCurve(activeObject, go.Link.None)">None</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeLinkCurve(activeObject, go.Link.Bezier)">Bezier</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeLinkCurve(activeObject, go.Link.JumpGap)">JumpGap</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeLinkCurve(activeObject, go.Link.JumpOver)">JumpOver</a></li>
                                            </ul>
                                        </div>

                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                                                <i class="fa fa-scissors"></i>
                                                <span class="caret"></span>
                                            </button>
                                            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 0)">0px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 1)">1px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 2)">2px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 3)">3px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 4)">4px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 5)">5px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeStrokeWidth(activeObject, 6)">6px</a></li>
                                            </ul>
                                        </div>

                                    </div>


                                    @*new go.Binding("stroke", "arrowheadColor"),  // shape.stroke = data.color
                                    new go.Binding("strokeWidth", "arrowheadStrokeWidth")  // shape.strokeWidth = data.thick*@
                                    <div class="btn-group">
                                        <input type="color" id="linkArrowheadColor" value="#ff0000">
                                        <div class="dropdown">
                                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-expanded="true">
                                                <i class="fa fa-scissors"></i>
                                                <span class="caret"></span>
                                            </button>
                                            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu1">
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeArrowheadStrokeWidth(activeObject, 0)">0px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeArrowheadStrokeWidth(activeObject, 1)">1px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeArrowheadStrokeWidth(activeObject, 2)">2px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeArrowheadStrokeWidth(activeObject, 3)">3px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeArrowheadStrokeWidth(activeObject, 4)">4px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeArrowheadStrokeWidth(activeObject, 5)">5px</a></li>
                                                <li role="presentation"><a role="menuitem" tabindex="-1" href="#" onclick="changeArrowheadStrokeWidth(activeObject, 6)">6px</a></li>
                                            </ul>
                                        </div>
                                    </div>

                                </div>

                            </div>
                            <div class="tab-pane" id="tab2">
                                @*@{ Html.RenderAction("MyRefs", "Reference", new { refs = new List<string> { "554fa04ba9b4882550c6fb80" } }); }*@
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    @*<button type="submit" id="saveMapNow" class="btn btn-primary" value="Submit">Save</button>*@
                    <div id='response'></div>
                </div>
            </div>
        </div>
    </div>


</body>
</html>
